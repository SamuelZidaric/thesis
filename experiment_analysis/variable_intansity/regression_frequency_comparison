import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import glob
import os
import statsmodels.api as sm

# Define the paths for both groups
group_1_path = 'Z:/neurobiology/zimmer/zidaric/data/uli_pip/int_pos/data/'
group_2_path = 'Z:/neurobiology/zimmer/zidaric/data/uli_pip/int_neg/data/'

# Define the subdivision values for each activation
subdivision_values = [60, 0, 40, 10, 80, 20, 40, 10, 60, 20, 80, 0, 40, 60, 80, 20, 10, 0, 60, 40, 20, 80, 0, 10, 60, 40, 80, 0, 10, 20]

# Function to process and return the data for a group
def process_group_data(paths):
    group_data = pd.DataFrame()
    for file_path in paths:
        temp_data = pd.read_excel(file_path)
        if 'Activation' in temp_data.columns:
            temp_data = temp_data[temp_data['Activation'] <= 30]
        temp_data['Subdivision'] = temp_data['Activation'].apply(lambda x: subdivision_values[x-1] if x <= len(subdivision_values) else None)
        group_data = pd.concat([group_data, temp_data], ignore_index=True)
    return group_data

# Function to calculate frequencies, fit regression, and plot
def calculate_frequencies_fit_regression_and_plot(group_data, color, label):
    # Exclude records where Subdivision is 0
    group_data = group_data[group_data['Subdivision'] != 0]

    group_data['Status'] = np.where(group_data['Status/Reaction Time'] == 'No Reversal', 'No Reversal',
                                    np.where(group_data['Status/Reaction Time'] == 'Already Reversing', 'Already Reversing', 'Valid Reversals'))
    grouped_data = group_data.groupby(['Subdivision', 'Status']).size().reset_index(name='Counts')
    valid_reversals = grouped_data[grouped_data['Status'] == 'Valid Reversals']

    total_counts_per_subdivision = group_data.groupby('Subdivision').size()
    valid_reversals['Frequency'] = valid_reversals['Counts'] / total_counts_per_subdivision.reindex(valid_reversals['Subdivision']).values
    
    # Prepare data for regression
    X = valid_reversals[['Subdivision']]
    X = sm.add_constant(X)  # Adds a constant term to the predictor
    Y = valid_reversals['Frequency']

    model = sm.OLS(Y, X).fit()  # Fit the regression model
    
    # Plot actual frequencies as scatter plots for reference
    plt.scatter(valid_reversals['Subdivision'], valid_reversals['Frequency'], color=color, alpha=0.5, label=f'{label} Frequencies')

    # Generate prediction and confidence interval
    x_plot = sm.add_constant(pd.DataFrame({'Subdivision': np.linspace(min(subdivision_values)+1, max(subdivision_values), 300)})) # Adjusted to exclude 0
    predictions = model.get_prediction(x_plot)
    prediction_summary = predictions.summary_frame(alpha=0.05)  # 95% confidence interval

    plt.plot(x_plot['Subdivision'], prediction_summary['mean'], color=color, label=f'{label} Regression Line')
    plt.fill_between(x_plot['Subdivision'], prediction_summary['mean_ci_lower'], prediction_summary['mean_ci_upper'], color=color, alpha=0.2)

# Process data for both groups
group_1_data = process_group_data(glob.glob(os.path.join(group_1_path, 'w*/*Ch0/rev_reaction.xlsx')))
group_2_data = process_group_data(glob.glob(os.path.join(group_2_path, 'w*/*Ch0/rev_reaction.xlsx')))

# Plotting
plt.figure(figsize=(12, 7))
calculate_frequencies_fit_regression_and_plot(group_1_data, 'blue', 'ATR+')
calculate_frequencies_fit_regression_and_plot(group_2_data, 'green', 'ATR-')

plt.title('Regression Lines for Frequencies of Induced Reversals by Intensity Level in ATR+ and ATR- Groups')
plt.xlabel('Intensity Level')
plt.ylabel('Frequency of Valid Reversals')
plt.ylim(0, 1)  # Set the y-axis to range from 0 to 1
plt.legend()
plt.grid(True)
plt.show()



