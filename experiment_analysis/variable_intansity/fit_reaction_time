import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import glob
import numpy as np

# Define the main path to your data and the mapping from Activation numbers to intensity levels
main_path = 'Z:/neurobiology/zimmer/zidaric/data/uli_pip/int_neg/data/'
subdivision_values = [60, 0, 40, 10, 80, 20, 40, 10, 60, 20, 80, 0, 40, 60, 80, 20, 10, 0, 60, 40, 20, 80, 0, 10, 60, 40, 80, 0, 10, 20]

# Function to create a DataFrame with reaction times and intensities
def create_reaction_time_dataframe(main_path, subdivision_values):
    rev_reaction_paths_list = glob.glob(os.path.join(main_path, 'w*/*Ch0/rev_reaction.xlsx'))
    df_list = []
    for path in rev_reaction_paths_list:
        df = pd.read_excel(path)
        df = df[df['Activation'] <= 30]  # Filter activations up to 30
        for index, row in df.iterrows():
            activation_index = row['Activation'] - 1
            intensity = subdivision_values[activation_index % len(subdivision_values)]
            reaction_time = pd.to_numeric(row['Status/Reaction Time'], errors='coerce')
            if not pd.isna(reaction_time):
                df_list.append({'Intensity': intensity, 'Reaction Time': reaction_time})
    return pd.DataFrame(df_list)

# Function to plot median reaction times with a connecting line
def plot_median_reaction_times(df):
    plt.figure(figsize=(12, 8))
    df_filtered = df[df['Intensity'] != 0]  # Exclude the 0 intensity subgroup
    median_reaction_times = df_filtered.groupby('Intensity')['Reaction Time'].median().reset_index()
    
    # Plot median values as points
    sns.scatterplot(x='Intensity', y='Reaction Time', data=median_reaction_times, color='red', s=100, label='Median')

    # Connect median points with a line
    plt.plot(median_reaction_times['Intensity'], median_reaction_times['Reaction Time'], color='blue', label='Median Line')

    plt.title('Median Reaction Times by Intensity Level in ATR-')
    plt.xlabel('Intensity Level')
    plt.ylabel('Median Reaction Time (seconds)')
    plt.ylim(0, 2)
    # Annotate total sample size
    total_sample_size = len(df_filtered)
    plt.text(0.895, 0.915, f'n = {total_sample_size}', transform=plt.gcf().transFigure, 
             ha='right', va='top', bbox=dict(facecolor='white', alpha=0.5))

    plt.xticks(rotation=45)  # Rotate x-axis labels to avoid overlap
    plt.legend()
    plt.grid(True)
    plt.show()

# Aggregate the reaction times and intensities into a DataFrame
df = create_reaction_time_dataframe(main_path, subdivision_values)

# Plot the median reaction times with a connecting line
plot_median_reaction_times(df)

